import java.io.IOException;
import java.util.StringTokenizer;

import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Mapper;

public class my_mapper extends Mapper<Object, Text, Text, IntWritable> {
	   
    private final static IntWritable one = new IntWritable(1);
    private Text word = new Text();
   
    public void map(Object key, Text value, Context context) throws IOException, InterruptedException {
        StringTokenizer tokenizer = new StringTokenizer(value.toString(), " - - ");
        if(tokenizer.hasMoreTokens()) {
            word.set(tokenizer.nextToken());
            context.write(word, one);
        }
    }
}





import java.io.IOException;

import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Reducer;

public class my_reducer extends Reducer<Text, IntWritable, Text, IntWritable> {

    private Text maxIP = new Text();
    private int maxCount = 0;

    public void reduce(Text key, Iterable<IntWritable> values, Context context) throws IOException, InterruptedException {
        int sum = 0;
        for (IntWritable val : values) {
            sum += val.get();
        }

        if (sum > maxCount) {
            maxCount = sum;
            maxIP.set(key);
        }
    }

    protected void cleanup(Context context) throws IOException, InterruptedException {
        context.write(maxIP, new IntWritable(maxCount));
    }
}




import java.io.IOException;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;

public class my_driver {
	
	 public static void main(String[] args)throws IOException, InterruptedException, ClassNotFoundException {

		Configuration conf = new Configuration();
		  Job job = Job.getInstance(conf, "Word Count");
		  job.setJarByClass(my_driver.class);
		     job.setMapperClass(my_mapper.class);
		     job.setReducerClass(my_reducer.class);
		     job.setOutputKeyClass(Text.class);
		     job.setOutputValueClass(IntWritable.class);
		     FileInputFormat.addInputPath(job, new Path(args[0]));
		     FileOutputFormat.setOutputPath(job, new Path(args[1]));
		     System.exit(job.waitForCompletion(true)?0:1);
		 }

}

